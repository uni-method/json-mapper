<?php declare(strict_types=1);

namespace Tests\Service;

use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;
use Tests\Auxiliary\Dummy;
use Tests\Auxiliary\YamlLoader;
use Tests\Auxiliary\A;
use Tests\FillObjectWithNonIdAttribute;
use Tests\FillObjectWithoutRelations;
use UniMethod\JsonapiMapper\Config\{AttributeConfig, ConfigStore, EntityConfig, Method, Scalar};
use UniMethod\JsonapiMapper\Exception\{JsonApiException, ConfigurationException};
use UniMethod\JsonapiMapper\External\{ContainerManagerInterface, ObjectManagerInterface};
use UniMethod\JsonapiMapper\Service\Deserializer;
use UniMethod\JsonapiMapper\Service\Serializer;

class DeserializeTest extends TestCase
{
    /** @var MockObject|ContainerManagerInterface $containerManager */
    protected $containerManager;

    /** @var MockObject|ObjectManagerInterface $objectManager */
    protected $objectManager;


    public function testAttributes(): void
    {
        $attr1 = 1400;
        $entity = (new EntityConfig())
            ->setClass(Dummy::class)
            ->setAutoGeneratedId(false)
            ->setId(
                new AttributeConfig('id', 'string', 'setTwo()', null)
            )
            ->setAlias('dummy')
            ->setDescription('Dummy class for example')
            ->setAttributes([
                new AttributeConfig('testOne', 'integer', 'one', null),
            ]);
        $config = new ConfigStore([$entity]);
        $deserialize = new Deserializer($config, $this->objectManager);
        $json = '{"data": {"id": "new", "type": "dummy", "attributes": {"testOne": ' . $attr1 . '}}}';
        /** @var Dummy $object */
        $object = $deserialize->handle(
            json_decode($json, true, 512, JSON_THROW_ON_ERROR),
            Method::CREATE,
            'bS.c');

        self::assertIsObject($object);
        self::assertObjectHasAttribute('one', $object);
        self::assertEquals($object->one, $attr1);
        self::assertObjectHasAttribute('two', $object);
        self::assertEquals($object->getTwo(), 'new');
    }

    public function testNestedObjects(): void
    {
        $loader = new YamlLoader($this->containerManager);
        $config = $loader->load('tests/Auxiliary/example.yml');
        $deserialize = new Deserializer($config, $this->objectManager);

        $json = $this->getJsonIncluded();
        $object = $deserialize->handle(
            json_decode($json, true, 512, JSON_THROW_ON_ERROR),
            Method::CREATE,
            'bS.c'
        );
        self::assertIsObject($object);
        self::assertEquals(3, $object->b_s[0]->c->count);
    }

    public function testNestedInnerObjects(): void
    {
        $loader = new YamlLoader($this->containerManager);
        $config = $loader->load('tests/Auxiliary/example.yml');
        $deserialize = new Deserializer($config, $this->objectManager);

        $json = $this->getJsonInner();
        /** @var A $object */
        $object = $deserialize->handle(
            json_decode($json, true, 512, JSON_THROW_ON_ERROR),
            Method::CREATE,
            'bS.c'
        );
        self::assertIsObject($object);
        self::assertEquals(3, $object->b_s[0]->c->count);
        self::assertEquals("wow2", $object->b_s[1]->title);
    }

    public function testNotFilledRelation(): void
    {
        $loader = new YamlLoader($this->containerManager);
        $config = $loader->load('tests/Auxiliary/example.yml');
        $deserialize = new Deserializer($config, $this->objectManager);

        $json = $this->getJsonIncluded();
        $object = $deserialize->handle(
            json_decode($json, true, 512, JSON_THROW_ON_ERROR),
            Method::CREATE,
            'bS.c,d'
        );
        self::assertIsObject($object);
        self::assertEquals(3, $object->b_s[0]->c->count);
    }

    public function dataProviderHandleByReverseObject(): array
    {
        return [
            FillObjectWithoutRelations::DESC => [
                'config' => new ConfigStore([(new EntityConfig())
                    ->setClass(FillObjectWithoutRelations::class)
                    ->setAlias($alias = 'aliasForObject1234')
                    ->setAutoGeneratedId(false)
                    ->setDescription('Simple object with protected id and with different types attributes')
                    ->setAttributes([
                        new AttributeConfig('floatVal', Scalar::TYPE_FLOAT, 'setFloatVal()', 'getFloatVal()'),
                        new AttributeConfig('stringVal', Scalar::TYPE_STRING, 'setStringVal()', 'getStringVal()'),
                        new AttributeConfig('intVal', 'integer', 'setIntVal()', 'getIntVal()'),
                        new AttributeConfig('dateTimeVal', Scalar::TYPE_DATETIME, 'setDateTimeVal()', 'getDateTimeVal()'),
                        new AttributeConfig('boolVal', Scalar::TYPE_BOOLEAN, 'setBoolVal()', 'isBoolVal()'),
                    ])]),
                'data' => [
                    'data' => [
                        'id' => 'qwerty',
                        'type' => $alias,
                        'attributes' => [
                            'floatVal' => 0.12312,
                            'stringVal' => 'Six-String Samurai',
                            'intVal' => 123123,
                            'dateTimeVal' => '2019-12-12 17:56:34',
                            'boolVal' => true,
                        ],
                    ]
                ],
                'method' => Method::CREATE,
                'included' => '',
                'expectedReversedData' => [
                    'data' => [
                        'id' => 'qwerty',
                        'type' => $alias,
                        'attributes' => [
                            'floatVal' => 0.12312,
                            'stringVal' => 'Six-String Samurai',
                            'intVal' => 123123,
                            'dateTimeVal' => '2019-12-12T17:56:34+00:00',
                            'boolVal' => true,
                        ],
                        'relationships' => [],
                    ],
                    'included' => [],
                ],
            ],
            FillObjectWithNonIdAttribute::DESC => [
                'config' => new ConfigStore([(new EntityConfig())
                    ->setClass(FillObjectWithNonIdAttribute::class)
                    ->setId(
                        new AttributeConfig('id', Scalar::TYPE_STRING, 'qwerty', 'qwerty'),
                    )
                    ->setAlias($alias = 'diffrentIdObj')
                    ->setAutoGeneratedId(false)
                    ->setDescription('This object has id in qwerty attribute')
                    ->setAttributes([
                        new AttributeConfig('count', 'integer', 'count', 'count'),
                    ])]),
                'data' => [
                    'data' => [
                        'id' => $id = '243efdsd-234asdaqw312hjnc-32454t4654',
                        'type' => $alias,
                        'attributes' => [
                            'count' => 123123,
                        ],
                    ]
                ],
                'method' => Method::CREATE,
                'included' => '',
                'expectedReversedData' => [
                    'data' => [
                        'id' => $id,
                        'type' => $alias,
                        'attributes' => [
                            'count' => 123123,
                        ],
                        'relationships' => [],
                    ],
                    'included' => [],
                ],
            ],
        ];
    }

    /**
     * @dataProvider dataProviderHandleByReverseObject
     *
     * @param ConfigStore $config
     * @param array $data
     * @param string $method
     * @param string $included
     * @param array $expectedReversedData
     * @throws JsonApiException
     * @throws ConfigurationException
     */
    public function testHandleByReverseObject(ConfigStore $config, array $data, string $method, string $included, array $expectedReversedData): void
    {
        $deserializer = new Deserializer($config, $this->objectManager);
        $serializer = new Serializer($config);
        $object = $deserializer->handle($data, $method, $included);
        self::assertIsObject($object);
        self::assertEquals($expectedReversedData, $serializer->handleObject($object));
    }

    protected function setUp(): void
    {
        $this->containerManager = $this->createMock(ContainerManagerInterface::class);
        $this->objectManager = $this->createMock(ObjectManagerInterface::class);
    }

    protected function getJsonIncluded(): string
    {
        return file_get_contents(dirname(__DIR__) . '/Auxiliary/body_included.json');
    }

    protected function getJsonInner(): string
    {
        return file_get_contents(dirname(__DIR__) . '/Auxiliary/body_inner.json');
    }
}
