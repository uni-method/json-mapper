<?php declare(strict_types=1);

namespace UniMethod\JsonapiMapper\Config;

use UniMethod\JsonapiMapper\External\ObjectHandler;

/**
 * Information about type, setter and getters for one model
 */
class EntityConfig
{
    public const DEFAULT_PRIMARY_ATTRIBUTE = 'id';
    private const DEFAULT_PRIMARY_ATTRIBUTE_GETTER = 'getId()';
    private const DEFAULT_PRIMARY_ATTRIBUTE_TYPE = 'string';

    protected string $class;

    protected AttributeConfig $id;

    /**
     * For cases than new ID generated in DB layer
     * @var bool
     */
    protected bool $autoGeneratedId = true;

    protected string $alias;

    protected string $description;

    /** @var ObjectHandler[] */
    protected array $postLoadHandlers = [];

    /**
     * @var ObjectHandler[]
     */
    protected array $preCreateHandlers = [];

    /** @var AttributeConfig[] */
    protected array $attributes = [];

    /** @var RelationshipConfig[] */
    protected array $relationships = [];

    public function __construct()
    {
        $this->id = new AttributeConfig(
            self::DEFAULT_PRIMARY_ATTRIBUTE,
            self::DEFAULT_PRIMARY_ATTRIBUTE_TYPE,
            self::DEFAULT_PRIMARY_ATTRIBUTE,
            self::DEFAULT_PRIMARY_ATTRIBUTE_GETTER
        );
    }

    /**
     * @param string $class
     * @return EntityConfig
     */
    public function setClass(string $class): self
    {
        $this->class = $class;
        return $this;
    }

    public function setId(AttributeConfig $id): self
    {
        $this->id = $id;
        return $this;
    }

    public function setAutoGeneratedId(bool $autoGeneratedId): self
    {
        $this->autoGeneratedId = $autoGeneratedId;
        return $this;
    }

    public function setAlias(string $alias): self
    {
        $this->alias = $alias;
        return $this;
    }

    public function setDescription(string $description): self
    {
        $this->description = $description;
        return $this;
    }

    /**
     * @param ObjectHandler[] $postLoadHandlers
     * @return EntityConfig
     */
    public function setPostLoadHandlers(array $postLoadHandlers): self
    {
        $this->postLoadHandlers = $postLoadHandlers;
        return $this;
    }

    /**
     * @param ObjectHandler[] $preCreateHandlers
     * @return EntityConfig
     */
    public function setPreCreateHandlers(array $preCreateHandlers): self
    {
        $this->preCreateHandlers = $preCreateHandlers;
        return $this;
    }

    /**
     * @param AttributeConfig[] $attributes
     * @return EntityConfig
     */
    public function setAttributes(array $attributes): self
    {
        $this->attributes = $attributes;
        return $this;
    }

    /**
     * @param RelationshipConfig[] $relationships
     * @return EntityConfig
     */
    public function setRelationships(array $relationships): self
    {
        $this->relationships = $relationships;
        return $this;
    }

    public function getId(): AttributeConfig
    {
        return $this->id;
    }

    public function isAutoGeneratedId(): bool
    {
        return $this->autoGeneratedId;
    }

    public function getClass(): string
    {
        return $this->class;
    }

    public function getAlias(): string
    {
        return $this->alias;
    }

    /**
     * @return AttributeConfig|null
     */
    public function getPrimaryAttribute(): AttributeConfig
    {
        return $this->getId();
    }

    /**
     * @return AttributeConfig[]
     */
    public function getAttributesWithGetters(): array
    {
        return array_values(
            array_filter($this->attributes, static function (AttributeConfig $attributeConfig) {
                return $attributeConfig->getter !== null;
            })
        );
    }

    /**
     * @return AttributeConfig[]
     */
    public function getAttributesWithSetters(): array
    {
        return array_values(
            array_filter($this->attributes, static function (AttributeConfig $attributeConfig) {
                return $attributeConfig->setter !== null;
            })
        );
    }

    /**
     * @param string[] $filterRelations
     * @return RelationshipConfig[]
     */
    public function getRelationshipsWithGetters(array $filterRelations): array
    {
        return array_values(
            array_filter($this->relationships, static function (RelationshipConfig $relationshipConfig) use ($filterRelations) {
                return $relationshipConfig->getter !== null && in_array($relationshipConfig->name, $filterRelations, true);
            })
        );
    }

    /**
     * @param array $filterRelations
     * @return RelationshipConfig[]
     */
    public function getRelationshipsWithSetters(array $filterRelations): array
    {
        return array_values(
            array_filter($this->relationships, static function (RelationshipConfig $relationshipConfig) use ($filterRelations) {
                return $relationshipConfig->setter !== null && in_array($relationshipConfig->name, $filterRelations, true);
            })
        );
    }

    /**
     * @return ObjectHandler[]
     */
    public function getPostLoadHandlers(): array
    {
        return $this->postLoadHandlers;
    }

    /**
     * @return ObjectHandler[]
     */
    public function getPreCreateHandlers(): array
    {
        return $this->preCreateHandlers;
    }
}
